# Generated by Selenium IDE
import sys
import os
import time
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import UnexpectedAlertPresentException
GENERAR_REPORTE = os.getenv("GENERAR_REPORTE", "True").lower() == "true"
#IMPORTACIONES
from abilities.navegar import iniciar_navegador
from task.login import Login
from task.navMenu import NavMenu
from task.crear import creacion
from utils.descifrar_contrasena import obtener_contrasena
from utils.captura import Capturas  # <-- Capturas importada
from utils.reportes.reporte_word import ReporteDocumento
from utils.reportes.word import ReporteManager
from datetime import datetime
from utils.errores_telegram.envio_error_telegram import error_persistencia,enviar_a_queue, convertir_imagen_a_base64

# Cargar las variables de entorno desde el archivo .env
load_dotenv()
# Acceder a las variables definidas en el archivo .env
BASE_URL = os.getenv('BASE_URL')
USUARIO = os.getenv('USUARIO')
CONTRASENA = obtener_contrasena()
CUADRANTE=os.getenv('CUADRANTE')
NODO=os.getenv('NODO')
ESTADO=os.getenv('ESTADO')
#CONTRASENA = obtener_contrasena()
# Validar si las variables de entorno están definidas
if not BASE_URL or not USUARIO or not CONTRASENA:
    raise ValueError("BASE_URL, USUARIO o CONTRASENA no están definidas en el archivo .env")


class TestCaso1(): 
    @classmethod
    def setup_class(cls):
        Capturas.limpiar_subcarpeta("cuadrantes_nodos")
        if GENERAR_REPORTE:
            cls.reporte = ReporteManager.obtener("crear_cuadrantes_nodos")
        else:
            cls.reporte = None

    def setup_method(self):
        time.sleep(5)
        self.driver = iniciar_navegador()
        self.vars = {}
        self.inicio_test = time.time()

    def teardown_method(self, method):
    # Calcular duración del test al inicio del teardown
        duracion_total = time.time() - self.inicio_test
        fecha = datetime.now().strftime("%d-%m-%Y")
        hora = datetime.now().strftime("%H:%M:%S")
      # Ejecutar error_persistencia
       
        try:
            wait = WebDriverWait(self.driver, 10)
            error_persistencia(self.driver, wait, self.reporte, contexto="crear simulador regla")
        except Exception as e:
            print(f"[ERROR] en error_persistencia: {e}")

        
        # Control de timeout
        if duracion_total > 60:
            print(f"[ALERTA] Test demoró {duracion_total:.2f} segundos. Enviando alerta...")
        try:
          ruta_timeout = Capturas.tomar_pantallazo(self.driver, "timeout_test", "", "Timeout")
          imagen_base64 = convertir_imagen_a_base64(ruta_timeout)
          #mensaje = f"*Timeout Aprovisionamiento Ingresar* - Test superó tiempo esperado en {BASE_URL} (Duración: {duracion_total:.2f}s)"
          mensaje = f"Fecha y hora: {fecha} / {hora}\nNodo: {BASE_URL}\nError: *Timeout Crear Cuadrantes Nodos*\nDescripción Error: Test superó tiempo esperado en {BASE_URL} (Duración: {duracion_total:.2f}s"
          enviar_a_queue("queue_telegram", mensaje, imagen_base64)
        except Exception as e:
          print(f"[ERROR] Al enviar alerta de timeout: {e}")

      # Cierre del driver
        if self.driver:
            self.driver.quit()

    @classmethod
    def teardown_class(cls):
        # Guarda todos los reportes que el manager tenga en memoria
        ReporteManager.guardar_todos()

    def test_caso1(self):
        #ABRIR NAVEGADOR
        time.sleep(5)
        self.driver.get(BASE_URL)
        self.driver.set_window_size(1280, 720)
        ruta1 = Capturas.tomar_pantallazo(self.driver, "abre_navegador","cuadrantes_nodos", "Inicio")
        if self.reporte:
            self.reporte.agregar_evidencia("Abre el Navegador", ruta1)

        #login
        login = Login(self.reporte, self.driver, USUARIO, CONTRASENA)
        rutas_login, tipoRed_element = login.ingresar()
        if GENERAR_REPORTE:
            for idx, ruta2 in enumerate(rutas_login, 1):
                self.reporte.agregar_evidencia(f"Login", ruta2)

        self.vars["tipoRed"] = tipoRed_element

        #validacion modulo
        if self.driver.execute_script("return (arguments[0] !== null)", self.vars["tipoRed"]): #true

            self.driver.find_element(By.ID, "tipoRed").click()
            dropdown = self.driver.find_element(By.ID, "tipoRed")
            dropdown.find_element(By.XPATH, "//option[. = 'Operaciones']").click()

            try:
                # Hacer clic en el botón "Submit"
                self.driver.find_element(By.ID, "Submit").click()
                time.sleep(10)
                # Validar error de ingreso
                print("paso el submit")
                try:
                    self.vars["errorIngreso"] = self.driver.execute_script(
                        "return !!document.querySelector('#DvActividad > table > tbody > tr:nth-child(3) > td > b > font')?.textContent.trim();"
                    )

                    if self.vars["errorIngreso"]:
                        self.vars["valueIngreso"] = self.driver.find_element(
                            By.XPATH, "//div[@id='DvActividad']/table/tbody/tr[3]/td/b/font"
                        ).text
                        ruta3 = Capturas.tomar_pantallazo(self.driver, "Error_inicio_sesion","cuadrantes_nodos", "Error")
                        if self.reporte:
                            self.reporte.agregar_evidencia("Error Inicio Sesión", ruta3)
                        print(f"Error: {self.vars['valueIngreso']}")
                        return  # Salir del método si hay error
                except Exception as e:
                    print("Error durante la validación de ingreso:", e)
                
                time.sleep(5)

                #NavMenu
                navegacion_menu =  NavMenu(self.reporte, self.driver)
                rutas_navegacion = navegacion_menu.menu_cuadrantes_nodo()
                if GENERAR_REPORTE:
                    for idx, ruta in enumerate(rutas_navegacion, 1):
                        self.reporte.agregar_evidencia(f"Navegación", ruta)

                time.sleep(5)

                #actualizar
                actualizar_menu = creacion(self.reporte, self.driver)
                rutas_actualizar = actualizar_menu.crear_cuadrante_nodo()
                if GENERAR_REPORTE:
                    for idx, ruta in enumerate(rutas_actualizar, 1):
                        self.reporte.agregar_evidencia(f"Creación", ruta)
                try:
                    # Espera explícita a que aparezca la alerta (máximo 5 segundos)
                    WebDriverWait(self.driver, 10).until(EC.alert_is_present())

                    # Cambia al contexto de alerta
                    alert = self.driver.switch_to.alert
                    alert_text = alert.text
                    print(f"Alerta detectada: {alert_text}")

                    if alert_text == "relacion ya se encuentra asignada": 
                        ruta4 = Capturas.tomar_pantallazo(self.driver, "alerta_sin_ui", "cuadrantes_nodos", "Alerta")
                        self.reporte.agregar_evidencia("Pantalla sin alerta", ruta4)
                        print("La relación ya está asignada.")
                    elif alert_text == "Transacción Exitosa":
                        ruta5 = Capturas.tomar_pantallazo(self.driver, "alerta_sin_ui", "cuadrantes_nodos", "Alerta")
                        self.reporte.agregar_evidencia("Pantalla sin alerta", ruta5)
                        print("El cuadrante fue asignado correctamente.")
                    else:
                        print(f"Mensaje de alerta inesperado: {alert_text}")

                    # Aceptar la alerta
                    alert.accept()
                except TimeoutException:
                    print("No se encontró ninguna alerta.")
                
                time.sleep(5)  

            except Exception as e:
                print("Error durante la validación de ingreso:")
            except TimeoutException as te:
                print("Error de tiempo de espera:", te)
            except NoSuchElementException as nse:
                print("Error: Elemento no encontrado:", nse)
            except Exception as e:
                print("Error desconocido:", e)

        else: #false
            try:
                time.sleep(2)

                # Hacer clic en el botón "Submit"
                # Encuentra el elemento
                submit_button = self.driver.find_element(By.ID, "Submit")
                # Realiza un doble clic
                ActionChains(self.driver).double_click(submit_button).perform()
                time.sleep(10)

                # Validar error de ingreso
                try:
                    self.vars["errorIngreso"] = self.driver.execute_script(
                        "return !!document.querySelector('#DvActividad > table > tbody > tr:nth-child(3) > td > b > font')?.textContent.trim();"
                    )

                    if self.vars["errorIngreso"]:
                        self.vars["valueIngreso"] = self.driver.find_element(
                            By.XPATH, "//div[@id='DvActividad']/table/tbody/tr[3]/td/b/font"
                        ).text
                        ruta2 = Capturas.tomar_pantallazo(self.driver, "Error_inicio_sesion","cuadrantes_nodos", "Error")
                        self.reporte.agregar_evidencia("Error Inicio Sesión", ruta2)
                        print(f"Error: {self.vars['valueIngreso']}")
                        return  # Salir del método si hay error
                except Exception as e:
                    print("Error durante la validación de ingreso:", e)

                time.sleep(5)

                ##NavMenu
                navegacion_menu =  NavMenu(self.reporte, self.driver)
                rutas_navegacion = navegacion_menu.menu_cuadrantes_nodo()
                if GENERAR_REPORTE:
                    for idx, ruta in enumerate(rutas_navegacion, 1):
                        self.reporte.agregar_evidencia(f"Navegación", ruta)

                time.sleep(5)

                #actualizar
                actualizar_menu = creacion(self.reporte, self.driver)
                rutas_actualizar = actualizar_menu.crear_cuadrante_nodo()
                if GENERAR_REPORTE:
                    for idx, ruta in enumerate(rutas_actualizar, 1):
                        self.reporte.agregar_evidencia(f"Creación", ruta)

                time.sleep(5)

                try:
                    # Espera explícita a que aparezca la alerta (máximo 5 segundos)
                    WebDriverWait(self.driver, 10).until(EC.alert_is_present())

                    # Cambia al contexto de alerta
                    alert = self.driver.switch_to.alert
                    alert_text = alert.text
                    print(f"Alerta detectada: {alert_text}")

                    if alert_text == "relacion ya se encuentra asignada":
                        ruta4 = Capturas.tomar_pantallazo(self.driver, "alerta_sin_ui", "cuadrantes_nodos", "Alerta")
                        self.reporte.agregar_evidencia("Pantalla sin alerta", ruta4)
                        print("La relación ya está asignada.")
                    elif alert_text == "Transacción Exitosa":
                        ruta5 = Capturas.tomar_pantallazo(self.driver, "alerta_sin_ui", "cuadrantes_nodos", "Alerta")
                        self.reporte.agregar_evidencia("Pantalla sin alerta", ruta5)
                        print("El cuadrante fue asignado correctamente.")
                    else:
                        print(f"Mensaje de alerta inesperado: {alert_text}")

                    # Aceptar la alerta
                    alert.accept()
                except TimeoutException:
                    print("No se encontró ninguna alerta.")
                
                time.sleep(5) 

            except Exception as e:
                print("Error durante la validación de ingreso:")
            except TimeoutException as te:
                print("Error de tiempo de espera:", te)
            except NoSuchElementException as nse:
                print("Error: Elemento no encontrado:", nse)
            except Exception as e:
                print("Error desconocido:", e)
