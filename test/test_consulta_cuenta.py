# Generated by Selenium IDE
import sys
sys.stdout.reconfigure(encoding='utf-8')
import os
from dotenv import load_dotenv
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver import ActionChains
from datetime import datetime
#VARIABLES
GENERAR_REPORTE = os.getenv("GENERAR_REPORTE", "True").lower() == "true"
# clases
from abilities.navegar import iniciar_navegador
from task.login import Login
from task.navMenu import NavMenu
from task.consulta import Consulta
from task.validarResultados import resultados
from utils.captura import Capturas
from utils.descifrar_contrasena import obtener_contrasena
from utils.reportes.reporte_word import ReporteDocumento
from utils.reportes.word import ReporteManager
from utils.errores_telegram.envio_error_telegram import error_persistencia, convertir_imagen_a_base64,enviar_a_queue

# Cargar las variables de entorno desde el archivo .env
load_dotenv()

# Acceder a las variables definidas en el archivo .env
BASE_URL = os.getenv('BASE_URL')
USUARIO = os.getenv('USUARIO')
CONTRASENA = obtener_contrasena()

# Validar si las variables de entorno están definidas
if not BASE_URL or not USUARIO or not CONTRASENA:
    raise ValueError("BASE_URL, USUARIO o CONTRASENA no están definidas en el archivo .env")

# Fixture para aceptar el parámetro de la orden
@pytest.fixture
def orden(request):
    return request.config.getoption("--orden")

class TestConsultaCuenta():
    @classmethod
    def setup_class(cls):
        Capturas.limpiar_subcarpeta("aprovisionamiento_ingresar")
        if GENERAR_REPORTE:
            cls.reporte = ReporteManager.obtener("Aprovisionamiento_Ingresar")
        else:
            cls.reporte = None

    def setup_method(self, method):
        time.sleep(5)
        self.driver = iniciar_navegador()
        if not self.driver:
          raise RuntimeError("No se pudo iniciar el navegador. Revisa iniciar_navegador().")
        self.vars = {}

        # Cargar variables de entorno
        self.base_url = os.getenv("BASE_URL")
        self.usuario = os.getenv("USUARIO")
        self.contrasena = os.getenv("CONTRASENA")
        self.reporte = self.__class__.reporte  # <- esta línea es la clave
        self.inicio_test = time.time()

    def teardown_method(self, method):
      fecha = datetime.now().strftime("%d-%m-%Y")
      hora = datetime.now().strftime("%H:%M:%S")
    # Calcular duración del test al inicio del teardown
      duracion_total = time.time() - self.inicio_test

      # Ejecutar error_persistencia
       
      try:
        wait = WebDriverWait(self.driver, 10)
        error_persistencia(self.driver, wait, self.reporte, contexto="crear simulador regla")
      except Exception as e:
        print(f"[ERROR] en error_persistencia: {e}")

      
      # Control de timeout
      if duracion_total > 60:
        print(f"[ALERTA] Test demoró {duracion_total:.2f} segundos. Enviando alerta...")
        try:
          ruta_timeout = Capturas.tomar_pantallazo(self.driver, "timeout_test", "", "Timeout")
          imagen_base64 = convertir_imagen_a_base64(ruta_timeout)
          #mensaje = f"*Timeout Aprovisionamiento Ingresar* - Test superó el tiempo esperado en {BASE_URL} (Duración: {duracion_total:.2f}s)"
          mensaje=f"Fecha y hora: {fecha} / {hora}\nNodo: {BASE_URL}\nError: *Timeout Aprovisionamiento Ingresar*\nDescripción Error: Test superó tiempo esperado en {BASE_URL} (Duración: {duracion_total:.2f}s"
          enviar_a_queue("queue_telegram", mensaje, imagen_base64)
        except Exception as e:
          print(f"[ERROR] Al enviar alerta de timeout: {e}")

      # Cierre del driver
      if self.driver:
        self.driver.quit()

    @classmethod
    def teardown_class(cls):
        # Guarda todos los reportes que el manager tenga en memoria
        ReporteManager.guardar_todos()
    
    def test_consultaCuenta(self, cuenta):
        # Abrir el archivo de órdenes si no se ha pasado un orden específico
        if cuenta is None:
            with open("utils/txt/cuentas_aprovisionamiento_ingresar.txt", "r") as f:
                
                cuentas = f.readlines()
        else:
            cuentas = [cuenta]  # Si se pasa un número de orden específico, usarlo directamente

        for cuenta in cuentas:
            cuenta = cuenta.strip()
            if not cuenta:
                print("Se encontró una línea vacía en el archivo de órdenes, se omite esta línea.")
                continue

            # Usar la URL base de las variables de entorno
            self.driver.get(BASE_URL)
            self.driver.set_window_size(1276, 672)
            ruta1 = Capturas.tomar_pantallazo(self.driver, "abre_navegador","aprovisionamiento_ingresar", "Inicio")
            if self.reporte:
                self.reporte.agregar_evidencia("Abre el Navegador", ruta1)
            
            # LOGIN
            login = Login(self.reporte, self.driver, USUARIO, CONTRASENA)
            rutas_login,tipoRed_element = login.ingresar()
            if GENERAR_REPORTE:
                for idx, ruta2 in enumerate(rutas_login, 1):
                    self.reporte.agregar_evidencia(f"Login", ruta2)

            self.vars["tipoRed"] = tipoRed_element
            #validacion modulo
            if self.driver.execute_script("return (arguments[0] !== null)", self.vars["tipoRed"]): #true

                
                self.driver.find_element(By.ID, "tipoRed").click()
                dropdown = self.driver.find_element(By.ID, "tipoRed")
                dropdown.find_element(By.XPATH, "//option[. = 'Operaciones']").click()
                
                try:
                    time.sleep(5)
                    # Hacer clic en el botón "Submit"
                    self.driver.find_element(By.ID, "Submit").click()

                    time.sleep(10)

                    # Validar error de ingreso
                    print("paso el submit")
                    try:
                        self.vars["errorIngreso"] = self.driver.execute_script(
                            "return !!document.querySelector('#DvActividad > table > tbody > tr:nth-child(3) > td > b > font')?.textContent.trim();"
                        )

                        if self.vars["errorIngreso"]:
                            self.vars["valueIngreso"] = self.driver.find_element(
                                By.XPATH, "//div[@id='DvActividad']/table/tbody/tr[3]/td/b/font"
                            ).text
                            ruta3 = Capturas.tomar_pantallazo(self.driver, "Error_inicio_sesion","aprovisionamiento_ingresar", "Error")
                            if self.reporte:
                                self.reporte.agregar_evidencia("Error Inicio Sesión", ruta3)
                            print(f"Error: {self.vars['valueIngreso']}")
                            return  # Salir del método si hay error
                    except Exception as e:
                        print("Error durante la validación de ingreso:", e)
                    
                    time.sleep(5)

                   # Navegar por el menú
                    navegacion_menu = NavMenu(self.reporte, self.driver)
                    rutas_navegacion= navegacion_menu.menu_aprovisionamiento_consulta_cuenta()
                    if GENERAR_REPORTE:
                        for idx, ruta in enumerate(rutas_navegacion, 1):
                            self.reporte.agregar_evidencia(f"Navegación", ruta)
                    time.sleep(5)

                    # Ingresar cuenta 
                    ingresar = Consulta(self.reporte, self.driver)
                    rutas_consulta = ingresar.consulta_aprovisionamiento_ingresar(cuenta)

                    if GENERAR_REPORTE and rutas_consulta:
                        for idy, ruta in enumerate(rutas_consulta, 1):
                            self.reporte.agregar_evidencia(f"[Consulta] Cuenta {cuenta} - Evidencia {idy}", ruta)
        
                    time.sleep(5)

                    # Validar resultados
                    validar = resultados(self.reporte, self.driver)
                    rutas_validar = validar.resultados_aprovisionamiento_ingresar(cuenta)

                    if GENERAR_REPORTE and rutas_validar:
                        for idy, ruta in enumerate(rutas_validar, 1):
                            self.reporte.agregar_evidencia(f"[Validación] Cuenta {cuenta} - Evidencia {idy}", ruta)
                    
                    time.sleep(5)

                except TimeoutException as te:
                    print("Error de tiempo de espera:", te)
                except NoSuchElementException as nse:
                    print("Error: Elemento no encontrado:", nse)
                except Exception as e:
                    print("Error desconocido:", e)
            else: #false
                try:
                    time.sleep(5)
                    # Hacer clic en el botón "Submit"
                    # Encuentra el elemento
                    submit_button = self.driver.find_element(By.ID, "Submit")
                    # Realiza un doble clic
                    ActionChains(self.driver).double_click(submit_button).perform()
                    
                    time.sleep(5)
                    # Validar error de ingreso
                    try:
                        self.vars["errorIngreso"] = self.driver.execute_script(
                            "return !!document.querySelector('#DvActividad > table > tbody > tr:nth-child(3) > td > b > font')?.textContent.trim();"
                        )

                        if self.vars["errorIngreso"]:
                            self.vars["valueIngreso"] = self.driver.find_element(
                                By.XPATH, "//div[@id='DvActividad']/table/tbody/tr[3]/td/b/font"
                            ).text
                            ruta2 = Capturas.tomar_pantallazo(self.driver, "Error_inicio_sesion","aprovisionamiento_ingresar", "Error")
                            self.reporte.agregar_evidencia("Error Inicio Sesión", ruta2)
                            print(f"Error: {self.vars['valueIngreso']}")
                            return  # Salir del método si hay error
                    except Exception as e:
                        print("Error durante la validación de ingreso:", e)

                    time.sleep(5)

                    # Navegar por el menú
                    navegacion_menu = NavMenu(self.reporte, self.driver)
                    rutas_navegacion= navegacion_menu.menu_aprovisionamiento_consulta_cuenta()
                    if GENERAR_REPORTE:
                        for idx, ruta in enumerate(rutas_navegacion, 1):
                            self.reporte.agregar_evidencia(f"Navegación", ruta)
                    time.sleep(5)

                    # Ingresar cuenta 
                    ingresar = Consulta(self.reporte, self.driver)
                    rutas_consulta = ingresar.consulta_aprovisionamiento_ingresar(cuenta)

                    if GENERAR_REPORTE and rutas_consulta:
                        for idy, ruta in enumerate(rutas_consulta, 1):
                            self.reporte.agregar_evidencia(f"Cuenta {cuenta}", ruta)
        
                    time.sleep(5)

                    # Validar resultados
                    validar = resultados(self.reporte, self.driver)
                    rutas_validar = validar.resultados_aprovisionamiento_ingresar(cuenta)

                    if GENERAR_REPORTE and rutas_validar:
                        for idy, ruta in enumerate(rutas_validar, 1):
                            self.reporte.agregar_evidencia(f"Resultados", ruta)


                    time.sleep(5)

                except TimeoutException as te:
                    print("Error de tiempo de espera:", te)
                except NoSuchElementException as nse:
                    print("Error: Elemento no encontrado:", nse)
                except Exception as e:
                    print("Error desconocido:", e)
